def notifyBuild(String buildStatus, Exception e) {
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = """*${buildStatus}*: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\nMore detail in console output at <${env.BUILD_URL}|${env.BUILD_URL}>"""
  def details = """${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':\n
    Check console output at ${env.BUILD_URL} """
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
    details +="<p>Error message ${e.message}, stacktrace: ${e}</p>"
    summary +="\nError message ${e.message}, stacktrace: ${e}"
  }

  // Send notifications
  // slackSend channel: "#cals-api", baseUrl: 'https://hooks.slack.com/services/', tokenCredentialId: 'slackmessagetpt2', color: colorCode, message: summary
  // emailext(
  //    subject: subject,
  //    body: details,
  //    attachLog: true,
  //    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
  //    to: "srikanth.chowdhary@osi.ca.gov"
  //  )


}

node ('preint') {
   properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')),
              [$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
			  parameters([
			  string(defaultValue: '{"user":"RACFID","staffId":"34","roles":["Supervisor"],"county_code":"19","county_name":"Orange","privileges":["CWS Case Management System", "Resource Management", "Resource Mgmt Placement Facility Maint", "Sealed", "Sensitive Persons", "Facility-search-rollout", "RFA-rollout"]}', description: '', name: 'USERNAME'),
			  string(defaultValue: '${APP_VERSION}', description: 'Docker hub container version', name: 'APP_VERSION'),
			  string(defaultValue: 'https://web.preint.cwds.io/cals', description: '', name: 'APP_URL')
			  ]),
		  pipelineTriggers([])
	  ])

   def errorcode = null;
   def buildInfo = '';

 try {

   stage('Github checkout') {
		  cleanWs()
		  git branch: 'development', credentialsId: '433ac100-b3c2-4519-b4d6-207c029a103b', url: 'https://github.com/ca-cwds/CALS.git'
   }

   stage('Run tests selenium'){
      withEnv(["CAPYBARA_APP_HOST=${APP_URL}",
               "CAPYBARA_DRIVER=selenium",
               "USERNAME=${USERNAME}"
               ]) {
	        sh 'cd docker/acceptance-tests/'
		sh 'pwd'
		sh 'env'
		sh 'docker-compose -f docker/acceptance-tests/docker-compose.yml up --exit-code-from cals_acceptance_test'
      }
	}
    stage ('Reports') {
		publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'docker/acceptance-tests/reports/coverage/rspec', reportFiles: 'index.html', reportName: 'Cals acceptance tests', reportTitles: ''])
    }
    stage ('Integration Env Deploy') {
        build job: '/Integration Environment/deploy-CALS/',
            parameters: [
            string(name: 'CALS_APP_VERSION', value: "${APP_VERSION}"),
            string(name: 'inventory', value: 'inventories/integration/hosts.yml')
            ],
            wait: false
    }
    slackSend channel: '#tech-cals-updates',color: 'good', message: "${env.JOB_NAME} #${env.BUILD_NUMBER} - *${currentBuild.currentResult}* after ${currentBuild.durationString}\n(Details at ${env.BUILD_URL})"	
    notifyBuild(currentBuild.result, null)
  
  } catch (Exception e)    {
    errorcode = e
    currentBuild.result = "FAIL"
    slackSend channel: '#tech-cals-updates',color: 'danger', message: "${env.JOB_NAME} #${env.BUILD_NUMBER} - *${currentBuild.currentResult}* after ${currentBuild.durationString}\n(Details at ${env.BUILD_URL})"
    notifyBuild(currentBuild.result,errorcode)
  } finally {
    sh 'docker-compose -f docker/acceptance-tests/docker-compose.yml down -v'
    fingerprint 'reports/*'
  }
}
